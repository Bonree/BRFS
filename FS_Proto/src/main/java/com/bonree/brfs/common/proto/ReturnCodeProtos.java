// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ReturnCode.proto

package com.bonree.brfs.common.proto;

public final class ReturnCodeProtos {
  private ReturnCodeProtos() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * <pre>
   *3开头为认证类错误,4开头为sn类异常错误,5开头为数据错误
   * </pre>
   *
   * Protobuf enum {@code brfs.proto.ReturnCodeEnum}
   */
  public enum ReturnCodeEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     *成功
     * </pre>
     *
     * <code>SUCCESS = 2000;</code>
     */
    SUCCESS(2000),
    /**
     * <pre>
     * 认证失败
     * </pre>
     *
     * <code>AUTH_FAILED_ERROR = 3001;</code>
     */
    AUTH_FAILED_ERROR(3001),
    /**
     * <pre>
     * version取值范围0~7
     * </pre>
     *
     * <code>FID_VERSION_ERROR = 3002;</code>
     */
    FID_VERSION_ERROR(3002),
    /**
     * <pre>
     * compress取值范围0~3
     * </pre>
     *
     * <code>FID_COMPRESS_ERROR = 3003;</code>
     */
    FID_COMPRESS_ERROR(3003),
    /**
     * <pre>
     * storageNameCode取值范围0~65535
     * </pre>
     *
     * <code>FID_STORAGE_NAME_CODE_ERROR = 3004;</code>
     */
    FID_STORAGE_NAME_CODE_ERROR(3004),
    /**
     * <pre>
     * uuid长度为32字节
     * </pre>
     *
     * <code>FID_UUID_ERROR = 3005;</code>
     */
    FID_UUID_ERROR(3005),
    /**
     * <pre>
     * time取值范围可到2118-12-31 23:59
     * </pre>
     *
     * <code>FID_TIME_ERROR = 3006;</code>
     */
    FID_TIME_ERROR(3006),
    /**
     * <pre>
     * serverId取值范围是0~16383
     * </pre>
     *
     * <code>FID_SERVERID_ERROR = 3007;</code>
     */
    FID_SERVERID_ERROR(3007),
    /**
     * <pre>
     * offset取值范围0~4294967295
     * </pre>
     *
     * <code>FID_OFFSET_ERROR = 3008;</code>
     */
    FID_OFFSET_ERROR(3008),
    /**
     * <code>FID_SIZE_ERROR = 3009;</code>
     */
    FID_SIZE_ERROR(3009),
    /**
     * <pre>
     *sn已存在
     * </pre>
     *
     * <code>STORAGE_NAME_EXIST_ERROR = 4001;</code>
     */
    STORAGE_NAME_EXIST_ERROR(4001),
    /**
     * <pre>
     *sn不存在
     * </pre>
     *
     * <code>STORAGE_NAME_NOT_EXIST_ERROR = 4002;</code>
     */
    STORAGE_NAME_NOT_EXIST_ERROR(4002),
    /**
     * <pre>
     *sn更新错误
     * </pre>
     *
     * <code>STORAGE_NAME_UPDATE_ERROR = 4003;</code>
     */
    STORAGE_NAME_UPDATE_ERROR(4003),
    /**
     * <pre>
     *数据删除错误
     * </pre>
     *
     * <code>DATA_DELETE_ERROR = 5001;</code>
     */
    DATA_DELETE_ERROR(5001),
    /**
     * <pre>
     *数据写入错误
     * </pre>
     *
     * <code>DATA_WRITE_ERROR = 5002;</code>
     */
    DATA_WRITE_ERROR(5002),
    /**
     * <pre>
     *数据读取错误
     * </pre>
     *
     * <code>DATA_READ_ERROR = 5003;</code>
     */
    DATA_READ_ERROR(5003),
    ;

    /**
     * <pre>
     *成功
     * </pre>
     *
     * <code>SUCCESS = 2000;</code>
     */
    public static final int SUCCESS_VALUE = 2000;
    /**
     * <pre>
     * 认证失败
     * </pre>
     *
     * <code>AUTH_FAILED_ERROR = 3001;</code>
     */
    public static final int AUTH_FAILED_ERROR_VALUE = 3001;
    /**
     * <pre>
     * version取值范围0~7
     * </pre>
     *
     * <code>FID_VERSION_ERROR = 3002;</code>
     */
    public static final int FID_VERSION_ERROR_VALUE = 3002;
    /**
     * <pre>
     * compress取值范围0~3
     * </pre>
     *
     * <code>FID_COMPRESS_ERROR = 3003;</code>
     */
    public static final int FID_COMPRESS_ERROR_VALUE = 3003;
    /**
     * <pre>
     * storageNameCode取值范围0~65535
     * </pre>
     *
     * <code>FID_STORAGE_NAME_CODE_ERROR = 3004;</code>
     */
    public static final int FID_STORAGE_NAME_CODE_ERROR_VALUE = 3004;
    /**
     * <pre>
     * uuid长度为32字节
     * </pre>
     *
     * <code>FID_UUID_ERROR = 3005;</code>
     */
    public static final int FID_UUID_ERROR_VALUE = 3005;
    /**
     * <pre>
     * time取值范围可到2118-12-31 23:59
     * </pre>
     *
     * <code>FID_TIME_ERROR = 3006;</code>
     */
    public static final int FID_TIME_ERROR_VALUE = 3006;
    /**
     * <pre>
     * serverId取值范围是0~16383
     * </pre>
     *
     * <code>FID_SERVERID_ERROR = 3007;</code>
     */
    public static final int FID_SERVERID_ERROR_VALUE = 3007;
    /**
     * <pre>
     * offset取值范围0~4294967295
     * </pre>
     *
     * <code>FID_OFFSET_ERROR = 3008;</code>
     */
    public static final int FID_OFFSET_ERROR_VALUE = 3008;
    /**
     * <code>FID_SIZE_ERROR = 3009;</code>
     */
    public static final int FID_SIZE_ERROR_VALUE = 3009;
    /**
     * <pre>
     *sn已存在
     * </pre>
     *
     * <code>STORAGE_NAME_EXIST_ERROR = 4001;</code>
     */
    public static final int STORAGE_NAME_EXIST_ERROR_VALUE = 4001;
    /**
     * <pre>
     *sn不存在
     * </pre>
     *
     * <code>STORAGE_NAME_NOT_EXIST_ERROR = 4002;</code>
     */
    public static final int STORAGE_NAME_NOT_EXIST_ERROR_VALUE = 4002;
    /**
     * <pre>
     *sn更新错误
     * </pre>
     *
     * <code>STORAGE_NAME_UPDATE_ERROR = 4003;</code>
     */
    public static final int STORAGE_NAME_UPDATE_ERROR_VALUE = 4003;
    /**
     * <pre>
     *数据删除错误
     * </pre>
     *
     * <code>DATA_DELETE_ERROR = 5001;</code>
     */
    public static final int DATA_DELETE_ERROR_VALUE = 5001;
    /**
     * <pre>
     *数据写入错误
     * </pre>
     *
     * <code>DATA_WRITE_ERROR = 5002;</code>
     */
    public static final int DATA_WRITE_ERROR_VALUE = 5002;
    /**
     * <pre>
     *数据读取错误
     * </pre>
     *
     * <code>DATA_READ_ERROR = 5003;</code>
     */
    public static final int DATA_READ_ERROR_VALUE = 5003;


    public final int getNumber() {
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ReturnCodeEnum valueOf(int value) {
      return forNumber(value);
    }

    public static ReturnCodeEnum forNumber(int value) {
      switch (value) {
        case 2000: return SUCCESS;
        case 3001: return AUTH_FAILED_ERROR;
        case 3002: return FID_VERSION_ERROR;
        case 3003: return FID_COMPRESS_ERROR;
        case 3004: return FID_STORAGE_NAME_CODE_ERROR;
        case 3005: return FID_UUID_ERROR;
        case 3006: return FID_TIME_ERROR;
        case 3007: return FID_SERVERID_ERROR;
        case 3008: return FID_OFFSET_ERROR;
        case 3009: return FID_SIZE_ERROR;
        case 4001: return STORAGE_NAME_EXIST_ERROR;
        case 4002: return STORAGE_NAME_NOT_EXIST_ERROR;
        case 4003: return STORAGE_NAME_UPDATE_ERROR;
        case 5001: return DATA_DELETE_ERROR;
        case 5002: return DATA_WRITE_ERROR;
        case 5003: return DATA_READ_ERROR;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ReturnCodeEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        ReturnCodeEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ReturnCodeEnum>() {
            public ReturnCodeEnum findValueByNumber(int number) {
              return ReturnCodeEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.bonree.brfs.common.proto.ReturnCodeProtos.getDescriptor().getEnumTypes().get(0);
    }

    private static final ReturnCodeEnum[] VALUES = values();

    public static ReturnCodeEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private ReturnCodeEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:brfs.proto.ReturnCodeEnum)
  }


  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\020ReturnCode.proto\022\nbrfs.proto*\237\003\n\016Retur" +
      "nCodeEnum\022\014\n\007SUCCESS\020\320\017\022\026\n\021AUTH_FAILED_E" +
      "RROR\020\271\027\022\026\n\021FID_VERSION_ERROR\020\272\027\022\027\n\022FID_C" +
      "OMPRESS_ERROR\020\273\027\022 \n\033FID_STORAGE_NAME_COD" +
      "E_ERROR\020\274\027\022\023\n\016FID_UUID_ERROR\020\275\027\022\023\n\016FID_T" +
      "IME_ERROR\020\276\027\022\027\n\022FID_SERVERID_ERROR\020\277\027\022\025\n" +
      "\020FID_OFFSET_ERROR\020\300\027\022\023\n\016FID_SIZE_ERROR\020\301" +
      "\027\022\035\n\030STORAGE_NAME_EXIST_ERROR\020\241\037\022!\n\034STOR" +
      "AGE_NAME_NOT_EXIST_ERROR\020\242\037\022\036\n\031STORAGE_N" +
      "AME_UPDATE_ERROR\020\243\037\022\026\n\021DATA_DELETE_ERROR",
      "\020\211\'\022\025\n\020DATA_WRITE_ERROR\020\212\'\022\024\n\017DATA_READ_" +
      "ERROR\020\213\'B3\n\034com.bonree.brfs.common.proto" +
      "B\020ReturnCodeProtos\210\001\000"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
